name: Build and Deploy API (DigitalOcean)

on:
  push:
    branches: [ master ]
  workflow_dispatch: {}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/jarvis-api
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./backend/api
          file: ./backend/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy over SSH
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          OWNER: ${{ github.repository_owner }}
        run: |
          ssh -o StrictHostKeyChecking=yes $SSH_USER@$SSH_HOST \
            "echo \"$GHCR_PAT\" | docker login ghcr.io -u $OWNER --password-stdin && \
             cd ~/jarvis/docker/production && \
             sed -i 's#ghcr.io/.\+/jarvis-api:latest#ghcr.io/'$OWNER'/jarvis-api:latest#' docker-compose.yml && \
             docker compose pull && docker compose up -d && \
             docker image prune -f"


